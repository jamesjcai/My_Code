dtable<-read.csv('tmp.txt')
dtable<-read.csv('tmp.txt',header=FALSE)
sfHeLa <- estimateSizeFactorsForMatrix( dtable )
library( DESeq )
dtable<-read.csv('tmp.txt',header=FALSE)
sfHeLa <- estimateSizeFactorsForMatrix( dtable )
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq", version = "3.8")
library( DESeq )
dtable<-read.csv('tmp.txt',header=FALSE)
sfHeLa <- estimateSizeFactorsForMatrix( dtable )
sfHeLa
dim(sfHeLa)
library( DESeq )
dtable<-read.csv('tmp.txt',header=FALSE)
sfHeLa <- estimateSizeFactorsForMatrix( dtable )
nCountsHela <-t(t(dtable)/sfHela)
library( DESeq )
dtable<-read.csv('tmp.txt',header=FALSE)
sfHeLa <- estimateSizeFactorsForMatrix( dtable )
nCountsHela <-t(t(dtable)/sfHeLa)
nCountsHela
library( DESeq )
dtable<-read.csv('tmp.txt',header=FALSE)
sfHeLa <- estimateSizeFactorsForMatrix( dtable )
nCountsHela <-t(t(dtable)/sfHeLa)
View(nCountsHela)
View(nCountsHela)
view(sfHeLa)
sfHeLa
# library( DESeq )
estimateSizeFactorsForMatrixx <- function(counts, locfunc=stats::median,
geoMeans, controlGenes) {
if (missing(geoMeans)) {
incomingGeoMeans <- FALSE
loggeomeans <- rowMeans(log(counts))
} else {
incomingGeoMeans <- TRUE
if (length(geoMeans) != nrow(counts)) {
stop("geoMeans should be as long as the number of rows of counts")
}
loggeomeans <- log(geoMeans)
}
if (all(is.infinite(loggeomeans))) {
stop("every gene contains at least one zero, cannot compute log geometric means")
}
sf <- if (missing(controlGenes)) {
apply(counts, 2, function(cnts) {
exp(locfunc((log(cnts) - loggeomeans)[is.finite(loggeomeans) & cnts > 0]))
})
} else {
if ( !( is.numeric(controlGenes) | is.logical(controlGenes) ) ) {
stop("controlGenes should be either a numeric or logical vector")
}
loggeomeansSub <- loggeomeans[controlGenes]
apply(counts[controlGenes,,drop=FALSE], 2, function(cnts) {
exp(locfunc((log(cnts) - loggeomeansSub)[is.finite(loggeomeansSub) & cnts > 0]))
})
}
if (incomingGeoMeans) {
# stabilize size factors to have geometric mean of 1
sf <- sf/exp(mean(log(sf)))
}
sf
}
dtable<-read.csv('tmp_small.txt',header=FALSE)
sfHeLa <- estimateSizeFactorsForMatrixx( dtable )
nCountsHela <-t(t(dtable)/sfHeLa)
# library( DESeq )
estimateSizeFactorsForMatrixx <- function(counts, locfunc=stats::median,
geoMeans, controlGenes) {
if (missing(geoMeans)) {
incomingGeoMeans <- FALSE
loggeomeans <- rowMeans(log(counts))
} else {
incomingGeoMeans <- TRUE
if (length(geoMeans) != nrow(counts)) {
stop("geoMeans should be as long as the number of rows of counts")
}
loggeomeans <- log(geoMeans)
}
if (all(is.infinite(loggeomeans))) {
stop("every gene contains at least one zero, cannot compute log geometric means")
}
sf <- if (missing(controlGenes)) {
apply(counts, 2, function(cnts) {
exp(locfunc((log(cnts) - loggeomeans)[is.finite(loggeomeans) & cnts > 0]))
})
} else {
if ( !( is.numeric(controlGenes) | is.logical(controlGenes) ) ) {
stop("controlGenes should be either a numeric or logical vector")
}
loggeomeansSub <- loggeomeans[controlGenes]
apply(counts[controlGenes,,drop=FALSE], 2, function(cnts) {
exp(locfunc((log(cnts) - loggeomeansSub)[is.finite(loggeomeansSub) & cnts > 0]))
})
}
if (incomingGeoMeans) {
# stabilize size factors to have geometric mean of 1
sf <- sf/exp(mean(log(sf)))
}
sf
}
dtable<-read.csv('tmp.txt',header=FALSE)
sfHeLa <- estimateSizeFactorsForMatrixx( dtable )
nCountsHela <-t(t(dtable)/sfHeLa)
View(nCountsHela)
# library( DESeq )
estimateSizeFactorsForMatrixx <- function(counts, locfunc=stats::median,
geoMeans, controlGenes) {
if (missing(geoMeans)) {
incomingGeoMeans <- FALSE
loggeomeans <- rowMeans(log(counts))
} else {
incomingGeoMeans <- TRUE
if (length(geoMeans) != nrow(counts)) {
stop("geoMeans should be as long as the number of rows of counts")
}
loggeomeans <- log(geoMeans)
}
if (all(is.infinite(loggeomeans))) {
stop("every gene contains at least one zero, cannot compute log geometric means")
}
sf <- if (missing(controlGenes)) {
apply(counts, 2, function(cnts) {
exp(locfunc((log(cnts) - loggeomeans)[is.finite(loggeomeans) & cnts > 0]))
})
} else {
if ( !( is.numeric(controlGenes) | is.logical(controlGenes) ) ) {
stop("controlGenes should be either a numeric or logical vector")
}
loggeomeansSub <- loggeomeans[controlGenes]
apply(counts[controlGenes,,drop=FALSE], 2, function(cnts) {
exp(locfunc((log(cnts) - loggeomeansSub)[is.finite(loggeomeansSub) & cnts > 0]))
})
}
if (incomingGeoMeans) {
# stabilize size factors to have geometric mean of 1
sf <- sf/exp(mean(log(sf)))
}
sf
}
dtable<-read.csv('tmp.txt',header=FALSE)
sfHeLa <- estimateSizeFactorsForMatrixx( dtable )
nCountsHela <-t(t(dtable)/sfHeLa)
View(nCountsHela)
sfHeLa
source("https://bioconductor.org/biocLite.R")
useDevel() # Need to use development version of Bioconductor
biocLite("SCnorm")
library(SCNorm)
library(ScNorm)
source("https://bioconductor.org/biocLite.R")
useDevel() # Need to use development version of Bioconductor
biocLite("SCnorm")
BiocManager::install(SCnorm)
BiocManager::install('SCnorm')
library(ScNorm)
library(SCnorm)
plotCountDepth(dtable)
plotCountDepth(nCountsHela)
data(ExampleSimSCData)
pdf("check_exampleData_count-depth_evaluation.pdf", height=5, width=7)
countDeptEst <- plotCountDepth(Data = ExampleSimSCData, Conditions = Conditions,
FilterCellProportion = .1, NCores=3)
dev.off()
data(ExampleSimSCData)
plotCountDepth(Data = ExampleSimSCData)
plotCountDepth(Data=dtable)
plotCountDepth(Data=dtable,FilterCellProportion = .1)
plotCountDepth(Data=dtable,FilterCellProportion = .01)
plotCountDepth(Data=dtable,FilterCellProportion = .5)
DataNorm <- SCnorm(Data = dtabe, PrintProgressPlots = TRUE, FilterCellNum = 10, PropToUse = .1, Thresh = .1, ditherCounts = TRUE)
Conditions = rep(c(1), each= 2339)
DataNorm <- SCnorm(Data = dtabe, Conditions=Conditions, PrintProgressPlots = TRUE, FilterCellNum = 10, PropToUse = .1, Thresh = .1, ditherCounts = TRUE)
Conditions = rep(c(1), each= 2339)
DataNorm <- SCnorm(Data = dtable, Conditions=Conditions, PrintProgressPlots = TRUE, FilterCellNum = 10, PropToUse = .1, Thresh = .1, ditherCounts = TRUE)
Conditions = rep(c(1), each= 2339)
DataNorm <- SCnorm(Data = dtable, Conditions=Conditions, PrintProgressPlots = TRUE, FilterCellNum = 10, PropToUse = .1, Thresh = .1, ditherCounts = TRUE)
Conditions = rep(c(1), each= 2339)
DataNorm <- SCnorm(Data = as.data.frame(dtable), Conditions=Conditions, PrintProgressPlots = TRUE, FilterCellNum = 10, PropToUse = .1, Thresh = .1, ditherCounts = TRUE)
ExampleSimSCData
Conditions = rep(c(1), each= 2339)
DataNorm <- SCnorm(Data = as.data.frame(dtable), Conditions=Conditions, PrintProgressPlots = TRUE, FilterCellNum = 10, PropToUse = .1, Thresh = .1, ditherCounts = TRUE)
matrix(,numrow=2,numcol=3)
matrix(,nrow=2,nol=3)
matrix(,nrow=2,ncol=3)
df<-data.frame(d,row.names = NULL,colnames=NULL)
df<-data.frame(d,row.names = NULL,colnames)
df<-data.frame(d,row.names = NULL,colnames)
d<-matrix(,nrow=2,ncol=3)
df<-data.frame(d,row.names = NULL,colnames)
df<-data.frame(d,row.names = NULL)
df<-as.data.fram(d)
df<-as.data.frame(d)
as.data.frame(d)
df<-as.data.frame(d)
head(df)
header(df)
rownames(df)<-paste('name',1:2)
df
paste('name',1:2)
paste('name_',1:2)
paste('name',1:2)
paste('name',1:2)
dftable<-as.data.frame(dtable);
dim(dftable)
rownames(dftable)<-paste('gene',1:13535)
Conditions = rep(c(1), each= 2339)
DataNorm <- SCnorm(Data = dftable, Conditions=Conditions, PrintProgressPlots = TRUE, FilterCellNum = 10, PropToUse = .1, Thresh = .1, ditherCounts = TRUE)
View(DataNorm)
q()
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install("scater", version = "3.8")
# BiocManager::install("scran", version = "3.8")
library(scran)
library(scater)
X<-read.csv('X.txt',header = FALSE)
Y<-read.csv('Y.txt',header = FALSE)
Z1<-read.csv('Z1.txt',header = FALSE)
Z2<-read.csv('Z2.txt',header = FALSE)
makeSCE <- function(X){
mName <- deparse(substitute(X))
X <- as.matrix(X)
rownames(X) <- paste0("G",seq_len(nrow(X)))
colnames(X) <- paste0(mName,seq_len(ncol(X)))
X <- SingleCellExperiment(list(counts=X))
X <- computeSumFactors(X)
X <- normalize(X)
return(X)
}
X <- makeSCE(X)
Y <- makeSCE(Y)
Z1 <- makeSCE(Z1)
Z2 <- makeSCE(Z2)
# https://bioconductor.org/packages/release/bioc/vignettes/scran/inst/doc/scran.html#7_batch_correction
out <- fastMNN(X, Y)
out
dim(out$corrected)
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install("scater", version = "3.8")
# BiocManager::install("scran", version = "3.8")
library(scran)
library(scater)
X<-read.csv('X.txt',header = FALSE)
Y<-read.csv('Y.txt',header = FALSE)
Z1<-read.csv('Z1.txt',header = FALSE)
Z2<-read.csv('Z2.txt',header = FALSE)
makeSCE <- function(X){
mName <- deparse(substitute(X))
X <- as.matrix(X)
rownames(X) <- paste0("G",seq_len(nrow(X)))
colnames(X) <- paste0(mName,seq_len(ncol(X)))
X <- SingleCellExperiment(list(counts=X))
X <- computeSumFactors(X)
X <- normalize(X)
return(X)
}
X <- makeSCE(X)
Y <- makeSCE(Y)
Z1 <- makeSCE(Z1)
Z2 <- makeSCE(Z2)
# https://bioconductor.org/packages/release/bioc/vignettes/scran/inst/doc/scran.html#7_batch_correction
out <- fastMNN(X, Y)
out
dim(out$corrected)
LS()
ls()
dir()
pwd()
