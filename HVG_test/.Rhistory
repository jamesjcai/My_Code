fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
out <- find_hvg(fileContent, plot = TRUE)
View(fileContent)
fileContent <- log(fileContent)
out <- find_hvg(fileContent, plot = TRUE)
fileContent <- read.csv("data_1.txt", sep = "\t", row.names = 1)
fileContent <- log(fileContent)
out <- find_hvg(fileContent, plot = TRUE)
table(out)
fileContent <- read.csv("data_1.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
colSums(fileContent)
out <- find_hvg(fileContent, plot = TRUE)
out <- find_hvg(fileContent, plot = TRUE, return.ranks = TRUE, return.p = TRUE)
out
View(out)
fileContent <- log10(fileContent)
out <- find_hvg(fileContent, plot = TRUE, return.ranks = TRUE, return.p = TRUE)
install.packages("limSolve")
fileContent <- read.csv("data_1.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
fileContent <- log(fileContent)
out <- find_hvg(fileContent, plot = TRUE, return.ranks = TRUE, return.p = TRUE)
out
fileContent <- read.csv("data_1.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
out <- find_hvg(fileContent, plot = TRUE, return.ranks = TRUE, return.p = TRUE)
require(MASS)
require(limSolve)
require(statmod)
dataframe <- fileContent
gene.names <- rownames(dataframe)
means <- rowMeans(dataframe, na.rm = T)
vars <- apply(dataframe, 1, var, na.rm=T)
cv2 <- vars/(means^2)
minMeanForFit <- unname(quantile(means[which(cv2 > 0.2)], 0.8))
recip.means <- 1/means
recip.means[is.infinite(recip.means)] <- 0
useForFit <- recip.means <= 0.1
fit <- glmgam.fit(cbind(a0 = 1, a1tilde=recip.means[!useForFit]), cv2[!useForFit])
resid.var <- var(fitted.values(fit) - cv2[!useForFit])
total.var <- var(cv2[!useForFit])
a0 <- unname(fit$coefficients["a0"])
a1 <- unname(fit$coefficients["a1tilde"])
xg <- seq(0, max(means[means != Inf]), length.out=100000)
vfit <- (a1/xg) + a0
d.f <- ncol(dataframe) - 1
a.fit <- (a1/means) + a0
varFitRatio <- vars/(a.fit * means^2)
varOrder <- order(varFitRatio, decreasing=T)
oed <- dataframe[varOrder, ]
View(oed)
smoothScatter(means, cv2, xlab="Mean expression", ylab=expression("CV"^2))
smoothScatter(means, cv2, xlab="Mean expression", ylab=expression("CV"^2), bandwidth = 100)
smoothScatter(means, cv2, xlab="Mean expression", ylab=expression("CV"^2), bandwidth = 500)
smoothScatter(means, cv2, xlab="Mean expression", ylab=expression("CV"^2), bandwidth = 10)
smoothScatter(means, cv2, xlab="Mean expression", ylab=expression("CV"^2), bandwidth = 30)
find_hvg <- function(dataframe, plot=FALSE, p.threshold=1e-2, return.ranks=FALSE,
return.p=FALSE){
# define a set of highly variable gene for the GFP+ and GFP- separately
require(MASS)
require(limSolve)
require(statmod)
# assume gene names are in the rows
# even if they aren't this will still get
# the input row ordering
gene.names <- rownames(dataframe)
means <- log(rowMeans(dataframe, na.rm = T))
vars <- apply(dataframe, 1, var, na.rm=T)
cv2 <- log(vars/(means^2))
minMeanForFit <- unname(quantile(means[which(cv2 > 0.2)], 0.8))
# select genes with mean value greater than min value for fitting
# remove values with 1/means == infinite
recip.means <- 1/means
recip.means[is.infinite(recip.means)] <- 0
useForFit <- recip.means <= 0.1
# fit with a gamma-distributed GLM
fit <- glmgam.fit(cbind(a0 = 1, a1tilde=recip.means[!useForFit]), cv2[!useForFit])
# calculate % variance explained by the model fit
resid.var <- var(fitted.values(fit) - cv2[!useForFit])
total.var <- var(cv2[!useForFit])
# get fitted values and mean-dispersion dependence line
a0 <- unname(fit$coefficients["a0"])
a1 <- unname(fit$coefficients["a1tilde"])
xg <- seq(0, max(means[means != Inf]), length.out=100000)
vfit <- (a1/xg) + a0
# add confidence intervals
d.f <- ncol(dataframe) - 1
# rank genes by the significance of their deviation from the fit
# to call HVGs
a.fit <- (a1/means) + a0
varFitRatio <- vars/(a.fit * means^2)
varOrder <- order(varFitRatio, decreasing=T)
oed <- dataframe[varOrder, ]
if(plot == TRUE){
smoothScatter(means, cv2, xlab="Mean expression", ylab=expression("CV"^2), bandwidth = 30)
lines(xg, vfit, col="black", lwd=3 )
lines(xg, vfit * qchisq(0.975, d.f)/d.f, lty=2, col="black")
lines(xg, vfit * qchisq(0.025, d.f)/d.f,lty=2,col="black")
# display the 100 most highly variable genes
points(means[varOrder[1:100]], cv2[varOrder[1:100]], col='red')
}
pvals <- pchisq(varFitRatio * d.f, d.f, lower.tail = F)
pvals[is.na(pvals)] <- 1.0
adj.pvals <- p.adjust(pvals, method='fdr')
HVG <- adj.pvals <= p.threshold
if(return.ranks){
# order p-values, then subset past a threshold
rank.p <- adj.pvals[order(adj.pvals, decreasing=FALSE)]
order.names <- gene.names[order(adj.pvals, decreasing=FALSE)]
thr.p <- rank.p <= p.threshold
HVG <- order.names[thr.p]
}
if(return.p){
HVG <- cbind(HVG, adj.pvals)
}
return(HVG)
}
fileContent <- read.csv("data_1.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
out <- find_hvg(fileContent, plot = TRUE, return.ranks = TRUE, return.p = TRUE)
find_hvg <- function(dataframe, plot=FALSE, p.threshold=1e-2, return.ranks=FALSE,
return.p=FALSE){
# define a set of highly variable gene for the GFP+ and GFP- separately
require(MASS)
require(limSolve)
require(statmod)
# assume gene names are in the rows
# even if they aren't this will still get
# the input row ordering
gene.names <- rownames(dataframe)
means <- log(rowMeans(dataframe, na.rm = T))
vars <- apply(dataframe, 1, var, na.rm=T)
cv2 <- log(vars/(means^2))
minMeanForFit <- unname(quantile(means[which(cv2 > 0.2)], 0.8))
# select genes with mean value greater than min value for fitting
# remove values with 1/means == infinite
recip.means <- 1/means
recip.means[is.infinite(recip.means)] <- 0
useForFit <- recip.means <= 0.1
# fit with a gamma-distributed GLM
fit <- glmgam.fit(cbind(a0 = 1, a1tilde=recip.means[!useForFit]), cv2[!useForFit])
# calculate % variance explained by the model fit
resid.var <- var(fitted.values(fit) - cv2[!useForFit])
total.var <- var(cv2[!useForFit])
# get fitted values and mean-dispersion dependence line
a0 <- unname(fit$coefficients["a0"])
a1 <- unname(fit$coefficients["a1tilde"])
xg <- seq(0, max(means[means != Inf]), length.out=100000)
vfit <- (a1/xg) + a0
# add confidence intervals
d.f <- ncol(dataframe) - 1
# rank genes by the significance of their deviation from the fit
# to call HVGs
a.fit <- (a1/means) + a0
varFitRatio <- vars/(a.fit * means^2)
varOrder <- order(varFitRatio, decreasing=T)
oed <- dataframe[varOrder, ]
if(plot == TRUE){
smoothScatter(means, cv2, xlab="Mean expression", ylab=expression("CV"^2))
lines(xg, vfit, col="black", lwd=3 )
lines(xg, vfit * qchisq(0.975, d.f)/d.f, lty=2, col="black")
lines(xg, vfit * qchisq(0.025, d.f)/d.f,lty=2,col="black")
# display the 100 most highly variable genes
points(means[varOrder[1:100]], cv2[varOrder[1:100]], col='red')
}
pvals <- pchisq(varFitRatio * d.f, d.f, lower.tail = F)
pvals[is.na(pvals)] <- 1.0
adj.pvals <- p.adjust(pvals, method='fdr')
HVG <- adj.pvals <= p.threshold
if(return.ranks){
# order p-values, then subset past a threshold
rank.p <- adj.pvals[order(adj.pvals, decreasing=FALSE)]
order.names <- gene.names[order(adj.pvals, decreasing=FALSE)]
thr.p <- rank.p <= p.threshold
HVG <- order.names[thr.p]
}
if(return.p){
HVG <- cbind(HVG, adj.pvals)
}
return(HVG)
}
out <- find_hvg(fileContent, plot = TRUE, return.ranks = TRUE, return.p = TRUE)
fileContent <- read.csv("data_1.txt", sep = "\t", row.names = 1)
out <- find_hvg(fileContent, plot = TRUE, return.ranks = TRUE, return.p = TRUE)
fileContent <- read.csv("data_2.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
out <- find_hvg(fileContent, plot = TRUE, return.ranks = TRUE, return.p = TRUE)
out
find_hvg <- function(dataframe, plot=FALSE, p.threshold=1e-2, return.ranks=FALSE,
return.p=FALSE){
# define a set of highly variable gene for the GFP+ and GFP- separately
require(MASS)
require(limSolve)
require(statmod)
# assume gene names are in the rows
# even if they aren't this will still get
# the input row ordering
gene.names <- rownames(dataframe)
means <- log(rowMeans(dataframe, na.rm = T))
vars <- log(apply(dataframe, 1, var, na.rm=T))
cv2 <- vars/(means^2)
minMeanForFit <- unname(quantile(means[which(cv2 > 0.2)], 0.8))
# select genes with mean value greater than min value for fitting
# remove values with 1/means == infinite
recip.means <- 1/means
recip.means[is.infinite(recip.means)] <- 0
useForFit <- recip.means <= 0.1
# fit with a gamma-distributed GLM
fit <- glmgam.fit(cbind(a0 = 1, a1tilde=recip.means[!useForFit]), cv2[!useForFit])
# calculate % variance explained by the model fit
resid.var <- var(fitted.values(fit) - cv2[!useForFit])
total.var <- var(cv2[!useForFit])
# get fitted values and mean-dispersion dependence line
a0 <- unname(fit$coefficients["a0"])
a1 <- unname(fit$coefficients["a1tilde"])
xg <- seq(0, max(means[means != Inf]), length.out=100000)
vfit <- (a1/xg) + a0
# add confidence intervals
d.f <- ncol(dataframe) - 1
# rank genes by the significance of their deviation from the fit
# to call HVGs
a.fit <- (a1/means) + a0
varFitRatio <- vars/(a.fit * means^2)
varOrder <- order(varFitRatio, decreasing=T)
oed <- dataframe[varOrder, ]
if(plot == TRUE){
smoothScatter(means, cv2, xlab="Mean expression", ylab=expression("CV"^2))
lines(xg, vfit, col="black", lwd=3 )
lines(xg, vfit * qchisq(0.975, d.f)/d.f, lty=2, col="black")
lines(xg, vfit * qchisq(0.025, d.f)/d.f,lty=2,col="black")
# display the 100 most highly variable genes
points(means[varOrder[1:100]], cv2[varOrder[1:100]], col='red')
}
pvals <- pchisq(varFitRatio * d.f, d.f, lower.tail = F)
pvals[is.na(pvals)] <- 1.0
adj.pvals <- p.adjust(pvals, method='fdr')
HVG <- adj.pvals <= p.threshold
if(return.ranks){
# order p-values, then subset past a threshold
rank.p <- adj.pvals[order(adj.pvals, decreasing=FALSE)]
order.names <- gene.names[order(adj.pvals, decreasing=FALSE)]
thr.p <- rank.p <= p.threshold
HVG <- order.names[thr.p]
}
if(return.p){
HVG <- cbind(HVG, adj.pvals)
}
return(HVG)
}
fileContent <- read.csv("data_2.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
out <- find_hvg(fileContent, plot = TRUE, return.ranks = TRUE, return.p = TRUE)
smoothScatter(log(means), log(cv2), xlab="Mean expression", ylab=expression("CV"^2))
xg
log(xg)
lines(log(xg), log(vfit), col="black", lwd=3 )
lines(log(xg), log(vfit * qchisq(0.975, d.f)/d.f), lty=2, col="black")
points(log(means[varOrder[1:100]]), log(cv2[varOrder[1:100]]), col='red')
find_hvg <- function(dataframe, plot=FALSE, p.threshold=1e-2, return.ranks=FALSE,
return.p=FALSE){
# define a set of highly variable gene for the GFP+ and GFP- separately
require(MASS)
require(limSolve)
require(statmod)
# assume gene names are in the rows
# even if they aren't this will still get
# the input row ordering
gene.names <- rownames(dataframe)
means <- rowMeans(dataframe, na.rm = T)
vars <- apply(dataframe, 1, var, na.rm=T)
cv2 <- vars/(means^2)
minMeanForFit <- unname(quantile(means[which(cv2 > 0.2)], 0.8))
# select genes with mean value greater than min value for fitting
# remove values with 1/means == infinite
recip.means <- 1/means
recip.means[is.infinite(recip.means)] <- 0
useForFit <- recip.means <= 0.1
# fit with a gamma-distributed GLM
fit <- glmgam.fit(cbind(a0 = 1, a1tilde=recip.means[!useForFit]), cv2[!useForFit])
# calculate % variance explained by the model fit
resid.var <- var(fitted.values(fit) - cv2[!useForFit])
total.var <- var(cv2[!useForFit])
# get fitted values and mean-dispersion dependence line
a0 <- unname(fit$coefficients["a0"])
a1 <- unname(fit$coefficients["a1tilde"])
xg <- seq(0, max(means[means != Inf]), length.out=100000)
vfit <- (a1/xg) + a0
# add confidence intervals
d.f <- ncol(dataframe) - 1
# rank genes by the significance of their deviation from the fit
# to call HVGs
a.fit <- (a1/means) + a0
varFitRatio <- vars/(a.fit * means^2)
varOrder <- order(varFitRatio, decreasing=T)
oed <- dataframe[varOrder, ]
if(plot == TRUE){
smoothScatter(log(means), log(cv2), xlab="Mean expression", ylab=expression("CV"^2))
lines(log(xg), log(vfit), col="black", lwd=3 )
lines(log(xg), log(vfit * qchisq(0.975, d.f)/d.f), lty=2, col="black")
lines(log(xg), log(vfit * qchisq(0.025, d.f)/d.f),lty=2,col="black")
# display the 100 most highly variable genes
points(log(means[varOrder[1:100]]), log(cv2[varOrder[1:100]]), col='red')
}
pvals <- pchisq(varFitRatio * d.f, d.f, lower.tail = F)
pvals[is.na(pvals)] <- 1.0
adj.pvals <- p.adjust(pvals, method='fdr')
HVG <- adj.pvals <= p.threshold
if(return.ranks){
# order p-values, then subset past a threshold
rank.p <- adj.pvals[order(adj.pvals, decreasing=FALSE)]
order.names <- gene.names[order(adj.pvals, decreasing=FALSE)]
thr.p <- rank.p <= p.threshold
HVG <- order.names[thr.p]
}
if(return.p){
HVG <- cbind(HVG, adj.pvals)
}
return(HVG)
}
fileContent <- read.csv("data_2.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
out <- find_hvg(fileContent, plot = TRUE, return.ranks = TRUE, return.p = TRUE)
out
fileContent <- read.csv("data_1.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
out <- find_hvg(fileContent, plot = TRUE, return.ranks = TRUE, return.p = TRUE)
out
png("data1_hvg.png")
out <- find_hvg(fileContent, plot = TRUE, return.ranks = TRUE, return.p = TRUE)
dev.off()
out <- find_hvg(fileContent, plot = TRUE)
dev.off()
png("data1_hvg.png")
out <- find_hvg(fileContent, plot = TRUE)
dev.off()
source("find_hvg.R")
fileContent <- read.csv("data_1.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
png("data1_hvg.png")
out <- find_hvg(fileContent, plot = TRUE)
dev.off()
png("data1_hvg.png", width = 1200, height = 1200, res = 300)
png("data1_hvg.png", width = 1200, height = 1200, res = 300)
png("data1_hvg.png", width = 1200, height = 1200, res = 300)
png("data1_hvg.png", width = 1200, height = 1200, res = 300)
out <- find_hvg(fileContent, plot = TRUE)
dev.off()
source("find_hvg.R")
fileContent <- read.csv("data_1.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
png("data1_hvg.png", width = 1200, height = 1200, res = 300)
out <- find_hvg(fileContent, plot = TRUE)
dev.off()
fileContent <- read.csv("data_2.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
png("data2_hvg.png", width = 1200, height = 1200, res = 300)
out <- find_hvg(fileContent, plot = TRUE)
dev.off()
names(out)
names(out)[out]
write.table(names(out)[out])
write.table(names(out)[out], row.names = FALSE, col.names = FALSE)
write.table(names(out)[out], row.names = FALSE, col.names = FALSE, quote = FALSE, file = "hvg_data1.txt")
source("find_hvg.R")
fileContent <- read.csv("data_1.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
png("data1_hvg.png", width = 1200, height = 1200, res = 300)
out <- find_hvg(fileContent, plot = TRUE)
dev.off()
write.table(names(out)[out], row.names = FALSE, col.names = FALSE, quote = FALSE, file = "hvg_data1.txt")
fileContent <- read.csv("data_2.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
png("data2_hvg.png", width = 1200, height = 1200, res = 300)
out <- find_hvg(fileContent, plot = TRUE)
dev.off()
write.table(names(out)[out], row.names = FALSE, col.names = FALSE, quote = FALSE, file = "hvg_data2.txt")
smoothScatter(log(means), log(cv2), xlab="log(Mean expression)", ylab=expression("log(CV"^2")"))
source("find_hvg.R")
fileContent <- read.csv("data_1.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
png("data1_hvg.png", width = 1200, height = 1200, res = 300)
out <- find_hvg(fileContent, plot = TRUE)
dev.off()
write.table(names(out)[out], row.names = FALSE, col.names = FALSE, quote = FALSE, file = "hvg_data1.txt")
fileContent <- read.csv("data_2.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
png("data2_hvg.png", width = 1200, height = 1200, res = 300)
out <- find_hvg(fileContent, plot = TRUE)
dev.off()
write.table(names(out)[out], row.names = FALSE, col.names = FALSE, quote = FALSE, file = "hvg_data2.txt")
fileContent <- read.csv("data_2.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
png("data2_hvg.png", width = 1200, height = 1200, res = 300)
out <- find_hvg(fileContent, plot = TRUE)
dev.off()
write.table(names(out)[out], row.names = FALSE, col.names = FALSE, quote = FALSE, file = "hvg_data2.txt")
source("find_hvg.R")
fileContent <- read.csv("data_2.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
out <- find_hvg(fileContent, plot = TRUE)
png("data2_hvg.png", width = 1200, height = 1200, res = 300)
out <- find_hvg(fileContent, plot = TRUE)
dev.off()
write.table(names(out)[out], row.names = FALSE, col.names = FALSE, quote = FALSE, file = "hvg_data2.txt")
install.packages(limSolve)
install.packages('limSolve')
fileContent <- read.csv("data_2.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
png("data2_hvg.png", width = 1200, height = 1200, res = 300)
out <- find_hvg(fileContent, plot = TRUE)
dev.off()
write.table(names(out)[out], row.names = FALSE, col.names = FALSE, quote = FALSE, file = "hvg_data2.txt")
source("find_hvg.R")
fileContent <- read.csv("data_2.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
png("data2_hvg.png", width = 1200, height = 1200, res = 300)
out <- find_hvg(fileContent, plot = TRUE)
dev.off()
write.table(names(out)[out], row.names = FALSE, col.names = FALSE, quote = FALSE, file = "hvg_data2.txt")
source("find_hvg.R")
fileContent <- read.csv("data_2.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
png("data2_hvg.png", width = 1200, height = 1200, res = 300)
out <- find_hvg(fileContent, plot = TRUE)
dev.off()
write.table(names(out)[out], row.names = FALSE, col.names = FALSE, quote = FALSE, file = "hvg_data2.txt")
dataframe<-fileContent
# define a set of highly variable gene for the GFP+ and GFP- separately
require(MASS)
require(limSolve)
require(statmod)
# assume gene names are in the rows
# even if they aren't this will still get
# the input row ordering
gene.names <- rownames(dataframe)
means <- rowMeans(dataframe, na.rm = T)
vars <- apply(dataframe, 1, var, na.rm=T)
cv2 <- vars/(means^2)
cv2
minMeanForFit <- unname(quantile(means[which(cv2 > 0.2)], 0.8))
# select genes with mean value greater than min value for fitting
# remove values with 1/means == infinite
recip.means <- 1/means
recip.means[is.infinite(recip.means)] <- 0
useForFit <- recip.means <= 0.1
useForFit
useForFit(1)
useForFit[1]
# fit with a gamma-distributed GLM
fit <- glmgam.fit(cbind(a0 = 1, a1tilde=recip.means[!useForFit]), cv2[!useForFit])
fit
fit$coefficients
source("find_hvg.R")
fileContent <- read.csv("data_2.txt", sep = "\t", row.names = 1)
fileContent <- t(t(fileContent)/colSums(fileContent)) * ceiling(mean(colSums(fileContent)))
out <- find_hvg(fileContent, plot = TRUE)
dataframe<-fileContent
# define a set of highly variable gene for the GFP+ and GFP- separately
require(MASS)
require(limSolve)
require(statmod)
# assume gene names are in the rows
# even if they aren't this will still get
# the input row ordering
gene.names <- rownames(dataframe)
means <- rowMeans(dataframe, na.rm = T)
vars <- apply(dataframe, 1, var, na.rm=T)
cv2 <- vars/(means^2)
minMeanForFit <- unname(quantile(means[which(cv2 > 0.2)], 0.8))
# select genes with mean value greater than min value for fitting
# remove values with 1/means == infinite
recip.means <- 1/means
recip.means[is.infinite(recip.means)] <- 0
useForFit <- recip.means <= 0.1
# fit with a gamma-distributed GLM
fit <- glmgam.fit(cbind(a0 = 1, a1tilde=recip.means[!useForFit]), cv2[!useForFit])
# calculate % variance explained by the model fit
resid.var <- var(fitted.values(fit) - cv2[!useForFit])
total.var <- var(cv2[!useForFit])
# get fitted values and mean-dispersion dependence line
a0 <- unname(fit$coefficients["a0"])
a1 <- unname(fit$coefficients["a1tilde"])
a0
a1
xg <- seq(0, max(means[means != Inf]), length.out=100000)
vfit <- (a1/xg) + a0
xg
max(mean)
max(means)
d.f <- ncol(dataframe) - 1
d.f
a.fit <- (a1/means) + a0
varFitRatio <- vars/(a.fit * means^2)
varOrder <- order(varFitRatio, decreasing=T)
vars
vars([1:10])
vars([1;10])
vars([1 10])
vars[1 10]
vars[1]
vars[2]
vars[3]
pvals <- pchisq(varFitRatio * d.f, d.f, lower.tail = F)
pvals(1)
pvals[1]
pvals[2]
pvals[3]
q09
quit
exit
q()
